// Generated by CoffeeScript 1.4.0
(function() {

  describe("BlackjackView.", function() {
    beforeEach(function() {
      this.blackjackView = new BlackjackView();
      return this.blackjackView;
    });
    describe("Initialize function:", function() {
      it("should evaluate player's score to 0", function() {
        return expect(this.blackjackView.playerScore).toEqual(0);
      });
      it("should evaluate dealer's score to 0", function() {
        return expect(this.blackjackView.dealerScore).toEqual(0);
      });
      it("should create an empty player's hand", function() {
        return expect(this.blackjackView.playerCards.length).toEqual(0);
      });
      return it("should create an empty dealer's hand", function() {
        return expect(this.blackjackView.dealerCards.length).toEqual(0);
      });
    });
    describe("Reset function:", function() {
      it("should add two cards to player's hand", function() {
        this.blackjackView.reset();
        return expect(this.blackjackView.playerCards.length).toEqual(2);
      });
      it("should increase player's score by value of new cards", function() {
        var value1, value2;
        this.blackjackView.reset();
        value1 = this.blackjackView.playerCards.at(0).evaluate(0);
        value2 = this.blackjackView.playerCards.at(1).evaluate(value1);
        return expect(value1 + value2).toEqual(this.blackjackView.playerScore);
      });
      return it("should generate different cards", function() {
        var similarityCheck;
        this.blackjackView.reset();
        similarityCheck = (this.blackjackView.playerCards.at(0).get('suit') === this.blackjackView.playerCards.at(1).get('suit')) && (this.blackjackView.playerCards.at(0).get('number') === this.blackjackView.playerCards.at(1).get('number'));
        return expect(similarityCheck).not.toBeTruthy();
      });
    });
    return describe("Hit function:", function() {
      it("should add one card to player's hand", function() {
        this.blackjackView.hit();
        return expect(this.blackjackView.playerCards.length).toEqual(1);
      });
      return it("should increase player's score by value of a new card", function() {
        this.blackjackView.hit();
        return expect(this.blackjackView.playerCards.at(0).evaluate(0)).toEqual(this.blackjackView.playerScore);
      });
    });
  });

  describe("CardModel.", function() {
    beforeEach(function() {
      this.card = new Card();
      return this.card;
    });
    describe("Initialize function:", function() {
      it("should create a property 'suit'", function() {
        return expect(this.card.has('suit')).toBeTruthy();
      });
      it("should evaluate 'suit' to an integer between 0 and 3", function() {
        var _ref;
        return expect(typeof this.card.get('suit') === 'number' && this.card.get('suit') % 1 === 0 && (0 <= (_ref = this.card.get('suit')) && _ref <= 3)).toBeTruthy();
      });
      it("should create a property 'number'", function() {
        return expect(this.card.has('number')).toBeTruthy();
      });
      return it("should evaluate 'number' to an integer between 2 and 14", function() {
        var _ref;
        return expect(typeof this.card.get('number') === 'number' && this.card.get('number') % 1 === 0 && (2 <= (_ref = this.card.get('number')) && _ref <= 14)).toBeTruthy();
      });
    });
    describe("Describe function:", function() {
      it("should return a string", function() {
        return expect(typeof this.card.describe()).toEqual('string');
      });
      return it("should return a string describing suit and number of the card", function() {
        var numbers, suits;
        suits = ["spades", "hearts", "diamonds", "clubs"];
        numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, "Jack", "Queen", "King", "Ace"];
        return expect([this.card.describe().split(' of ')[0], this.card.describe().split(' of ')[1]]).toEqual(['' + numbers[this.card.get('number') - 2], suits[this.card.get('suit')]]);
      });
    });
    return describe("Evaluate function:", function() {
      it("should evaluate cards between 2 and 10 to their number", function() {
        this.card.set({
          'number': 8
        });
        return expect(this.card.evaluate(Math.random() * 21)).toEqual(8);
      });
      it("should evaluate Jack, Queen and King to 10", function() {
        this.card.set({
          'number': 12
        });
        return expect(this.card.evaluate(Math.random() * 21)).toEqual(10);
      });
      it("should evaluate Ace to 11 if player's score is less than 11", function() {
        this.card.set({
          'number': 14
        });
        return expect(this.card.evaluate(8)).toEqual(11);
      });
      return it("should evaluate Ace to 11 if player's score is bigger than 12", function() {
        this.card.set({
          'number': 14
        });
        return expect(this.card.evaluate(12)).toEqual(1);
      });
    });
  });

}).call(this);
